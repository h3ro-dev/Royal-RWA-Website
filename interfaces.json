{
  "_description": "Central communication hub for all engineers. Update your section when creating/modifying interfaces.",
  "_lastUpdated": "2024-01-26T10:00:00Z",
  
  "engineer1": {
    "components": {
      "Button": {
        "status": "planned",
        "props": {
          "variant": "primary | secondary | ghost",
          "size": "sm | md | lg",
          "disabled?": "boolean",
          "loading?": "boolean",
          "onClick?": "() => void"
        },
        "usage": "<Button variant='primary' size='md'>Click me</Button>"
      },
      "Card": {
        "status": "planned",
        "props": {
          "glassMorphism?": "boolean",
          "padding?": "sm | md | lg",
          "hover?": "boolean"
        }
      },
      "Input": {
        "status": "planned",
        "props": {
          "type": "text | number | email",
          "label": "string",
          "error?": "string",
          "floatingLabel?": "boolean"
        }
      },
      "StatCard": {
        "status": "planned",
        "props": {
          "label": "string",
          "value": "string | number",
          "change?": "string",
          "icon?": "ReactNode"
        }
      }
    },
    "theme": {
      "colors": {
        "royal-midnight": "#1a1a4e",
        "royal-deep-blue": "#2d2d7f",
        "royal-gold": "#d4af37",
        "royal-bright-gold": "#ffd700"
      },
      "breakpoints": {
        "mobile": "375px",
        "tablet": "768px",
        "desktop": "1440px"
      }
    }
  },
  
  "engineer2": {
    "pages": {
      "/": {
        "status": "complete",
        "components_needed": ["Button", "StatCard", "Card"],
        "data_needed": ["tvl", "users", "currentAPY"],
        "features": [
          "Hero section with animated stats",
          "Trust indicators bar",
          "Social proof section",
          "Quick stats with APY display"
        ]
      },
      "/calculator": {
        "status": "complete",
        "components_needed": ["Input", "Button", "Chart"],
        "data_needed": ["yields", "projectionAPI"],
        "features": [
          "Interactive calculator with slider",
          "Compound/simple interest toggle",
          "Projection chart (recharts)",
          "Comparison table"
        ]
      },
      "/tokens": {
        "status": "complete",
        "components_needed": ["TokenCard", "Modal"],
        "data_needed": ["tokenInfo"],
        "features": [
          "3-token orbital visualization",
          "Interactive token selection",
          "Value flow diagram",
          "Benefits breakdown"
        ]
      },
      "/staking": {
        "status": "complete",
        "components_needed": ["Input", "Button", "ProgressBar", "Modal"],
        "data_needed": ["walletConnection", "stakingAPI", "userBalance"],
        "features": [
          "3-step flow (amount, period, confirm)",
          "Preset amounts",
          "Success celebration state",
          "Warning for locked periods"
        ]
      },
      "/assets": {
        "status": "complete",
        "components_needed": ["Card", "FilterTabs"],
        "data_needed": ["assetsList", "portfolioStats"],
        "features": [
          "Asset portfolio grid",
          "Filter by asset type",
          "Portfolio statistics",
          "100% collateralization display"
        ]
      },
      "/about": {
        "status": "complete",
        "components_needed": ["Card", "Timeline"],
        "data_needed": ["teamInfo", "partnerLogos"],
        "features": [
          "Mission statement",
          "Journey timeline",
          "Team showcase",
          "Trust indicators"
        ]
      }
    },
    "features": {
      "yieldCalculator": {
        "status": "complete",
        "input": {
          "amount": "number",
          "period": "flexible | year1 | year2",
          "compounding": "boolean"
        },
        "output": {
          "totalReturn": "number",
          "profit": "number",
          "apy": "number",
          "dailyEarnings": "number",
          "projectionData": "Array<{month: string, value: number}>"
        }
      },
      "stakingFlow": {
        "status": "complete",
        "steps": ["amount_selection", "period_selection", "confirmation"],
        "mockBalance": 50000,
        "presetAmounts": [1000, 5000, 10000, 25000, 50000, 100000]
      },
      "tokenVisualizer": {
        "status": "complete",
        "tokens": ["RWA", "RLP", "RUSD"],
        "animations": "orbital_float",
        "interactivity": "click_to_select"
      }
    },
    "dataNeeds": {
      "critical": [
        "GET /api/stats/tvl - Total value locked",
        "GET /api/stats/users - Active users count",
        "GET /api/yields/current - Current APY rates",
        "POST /api/staking/stake - Execute staking",
        "GET /api/user/balance - User RWA balance"
      ],
      "nice_to_have": [
        "WebSocket activity feed",
        "Historical yield data",
        "Asset portfolio details",
        "Real user testimonials"
      ]
    },
    "mockData": {
      "location": "/src/lib/mock-data.ts",
      "includes": [
        "MOCK_TVL = 125000000",
        "MOCK_USERS = 12543",
        "MOCK_APY = { flexible: 10, year1: 12, year2: 14 }",
        "MOCK_ACTIVITY - Recent transactions",
        "MOCK_PORTFOLIO_STATS - Asset statistics"
      ]
    }
  },
  
  "engineer3": {
    "apis": {
      "GET /api/tokens": {
        "status": "implemented",
        "params": {
          "type": "rwa | lp | stablecoin",
          "chainId": "number",
          "address?": "string"
        },
        "response": {
          "success": "boolean",
          "data": {
            "name": "string",
            "symbol": "string",
            "decimals": "number",
            "totalSupply": "string",
            "balance?": "string",
            "formattedBalance?": "string"
          }
        },
        "mock_available": true
      },
      "GET /api/staking": {
        "status": "implemented",
        "params": {
          "action": "stakes | yields",
          "address?": "string",
          "chainId": "number"
        },
        "response": {
          "success": "boolean",
          "data": "StakePosition[] | YieldData[]"
        },
        "mock_available": true
      },
      "POST /api/staking": {
        "status": "implemented",
        "request": {
          "action": "stake | unstake | claim",
          "amount?": "string",
          "lockPeriod?": "number",
          "stakeId?": "string",
          "chainId": "number"
        },
        "response": {
          "success": "boolean",
          "data": {
            "transactionHash": "string"
          }
        }
      },
      "GET /api/assets": {
        "status": "implemented",
        "params": {
          "action?": "list | portfolio | details",
          "id?": "string",
          "country?": "string",
          "type?": "string",
          "page?": "number",
          "limit?": "number",
          "chainId": "number"
        },
        "response": {
          "success": "boolean",
          "data": "RWAAsset[] | RWAPortfolio | RWAAsset",
          "page?": "number",
          "limit?": "number",
          "total?": "number",
          "hasMore?": "boolean"
        },
        "mock_available": true
      },
      "GET /api/analytics": {
        "status": "implemented",
        "params": {
          "type": "overview | activity | performance",
          "chainId": "number",
          "limit?": "number"
        },
        "response": {
          "success": "boolean",
          "data": "Analytics | ActivityItem[] | PerformanceData"
        },
        "mock_available": true
      },
      "GET /api/market": {
        "status": "implemented",
        "params": {
          "token?": "royal-rwa | royal-lp | royal-stablecoin",
          "period?": "1h | 24h | 7d | 30d"
        },
        "response": {
          "success": "boolean",
          "data": "MarketData | MarketData[] | HistoricalData"
        },
        "mock_available": true
      },
      "POST /api/auth/connect": {
        "status": "implemented",
        "request": {
          "address": "string",
          "chainId": "number",
          "signature?": "string"
        },
        "response": {
          "success": "boolean",
          "data": {
            "address": "string",
            "chainId": "number",
            "sessionToken": "string",
            "expiresAt": "number",
            "isVerified": "boolean",
            "connectedAt": "number"
          }
        }
      },
      "POST /api/auth/verify": {
        "status": "implemented",
        "request": {
          "address": "string",
          "message": "string",
          "signature": "string",
          "sessionToken?": "string"
        },
        "response": {
          "success": "boolean",
          "data": {
            "address": "string",
            "verified": "boolean",
            "timestamp": "number",
            "sessionValid": "boolean"
          }
        }
      },
      "GET /api/auth/verify": {
        "status": "implemented",
        "params": {
          "token": "string"
        },
        "response": {
          "success": "boolean",
          "data": {
            "valid": "boolean",
            "expiresAt": "number | null"
          }
        }
      },
      "GET /api/calculator/projection": {
        "status": "implemented",
        "params": {
          "amount": "string",
          "lockPeriod": "number",
          "compound?": "none | monthly | quarterly | annually"
        },
        "response": {
          "success": "boolean",
          "data": {
            "initialAmount": "string",
            "finalAmount": "string",
            "totalRewards": "string",
            "apy": "number",
            "projectedReturns": "Array<{month: number, principal: string, rewards: string, total: string}>"
          }
        },
        "mock_available": true
      },
      "POST /api/calculator/projection": {
        "status": "implemented",
        "request": {
          "amount": "string",
          "lockPeriod": "number",
          "compoundFrequency?": "none | monthly | quarterly | annually"
        },
        "response": {
          "success": "boolean",
          "data": {
            "initialAmount": "string",
            "finalAmount": "string",
            "totalRewards": "string",
            "apy": "number",
            "projectedReturns": "Array<{month: number, principal: string, rewards: string, total: string}>"
          }
        }
      },
      "GET /api/stats/tvl": {
        "status": "implemented",
        "params": {
          "chainId": "number",
          "period?": "24h | 7d | 30d | all"
        },
        "response": {
          "success": "boolean",
          "data": {
            "current": "string",
            "change24h": "number",
            "change7d": "number",
            "change30d": "number",
            "breakdown": {
              "stakedTokens": "string",
              "rwaAssets": "string",
              "liquidityPools": "string"
            },
            "history": "Array<{timestamp: number, value: string}>"
          }
        },
        "mock_available": true
      },
      "GET /api/stats/users": {
        "status": "implemented",
        "params": {
          "period?": "7d | 30d | 90d | all",
          "chainId": "number"
        },
        "response": {
          "success": "boolean",
          "data": {
            "totalUsers": "number",
            "activeUsers": "number",
            "newUsers24h": "number",
            "newUsers7d": "number",
            "newUsers30d": "number",
            "averageHolding": "string",
            "medianHolding": "string",
            "distribution": "object",
            "topCountries": "Array<{country: string, users: number, percentage: number}>",
            "growth": "Array<{date: string, totalUsers: number, activeUsers: number, newUsers: number}>"
          }
        },
        "mock_available": true
      },
      "GET /api/stats/yields": {
        "status": "implemented",
        "params": {
          "period?": "7d | 30d | 90d | 1y",
          "chainId": "number"
        },
        "response": {
          "success": "boolean",
          "data": {
            "current": {
              "flexible": "number",
              "oneYear": "number",
              "twoYear": "number"
            },
            "averageAPY": "number",
            "totalRewardsPaid": "string",
            "monthlyRewardRate": "string",
            "historical": "Array<{date: string, flexible: number, oneYear: number, twoYear: number}>",
            "projectedYields": {
              "nextMonth": "string",
              "nextQuarter": "string",
              "nextYear": "string"
            },
            "topPerformers": "Array<{address: string, earned: string, apy: number, lockPeriod: number}>"
          }
        },
        "mock_available": true
      },
      "GET /api/activity/stream": {
        "status": "implemented",
        "description": "Server-Sent Events endpoint for real-time activity feed",
        "response": {
          "type": "text/event-stream",
          "events": {
            "id": "string",
            "type": "stake | unstake | claim | asset_added | trade | reward",
            "timestamp": "number",
            "data": "object"
          }
        },
        "mock_available": true
      }
    },
    "web3": {
      "wagmiConfig": {
        "status": "planned",
        "chains": ["ethereum", "polygon", "arbitrum"],
        "features": ["wallet_connect", "metamask", "coinbase"]
      },
      "contracts": {
        "rwaToken": "0x... (pending deployment)",
        "stakingContract": "0x... (pending deployment)",
        "stablecoin": "0x... (pending deployment)"
      }
    },
    "realtime": {
      "server_sent_events": {
        "status": "implemented",
        "endpoint": "/api/activity/stream",
        "channels": ["activity"]
      },
      "websocket": {
        "status": "planned",
        "endpoint": "wss://api.royal-rwa.com/realtime",
        "channels": ["prices", "activity", "tvl"]
      }
    },
    "mockData": {
      "status": "implemented",
      "file": "src/services/mockData.ts",
      "includes": {
        "stats": "Platform statistics",
        "yields": "Yield options and history",
        "assets": "RWA assets with full details",
        "stakePositions": "Sample staking positions",
        "activities": "Recent platform activities",
        "prices": "Token price data",
        "tokens": "Token information",
        "yieldOptions": "Available staking tiers"
      }
    }
  },
  
  "engineer4": {
    "testing": {
      "unit": {
        "status": "implemented",
        "framework": "vitest",
        "coverage_target": "80%",
        "files_created": [
          "vitest.config.ts",
          "tests/setup.ts",
          "tests/unit/YieldCalculator.test.ts"
        ]
      },
      "e2e": {
        "status": "implemented",
        "framework": "playwright",
        "critical_paths": [
          "homepage -> calculator -> results",
          "connect -> stake -> success"
        ],
        "files_created": [
          "playwright.config.ts",
          "tests/e2e/critical-flows.spec.ts"
        ]
      }
    },
    "performance": {
      "targets": {
        "lighthouse": 95,
        "fcp": "1.5s",
        "lcp": "2.5s",
        "cls": 0.1,
        "bundle_size": "300KB"
      },
      "monitoring": {
        "web_vitals": "implemented",
        "error_tracking": "implemented",
        "analytics": "implemented",
        "files_created": [
          "src/lib/analytics.ts",
          "scripts/performance-report.js"
        ]
      }
    },
    "animations": {
      "system": "implemented",
      "presets": {
        "hover": "scale(1.02) with spring",
        "page_transition": "fade + slide",
        "success": "confetti particles",
        "loading": "skeleton screens"
      },
      "files_created": [
        "src/lib/animations.ts",
        "src/components/Skeleton.tsx"
      ]
    },
    "optimization": {
      "next_config": "implemented",
      "security_headers": "implemented",
      "bundle_splitting": "configured",
      "image_optimization": "implemented",
      "files_created": [
        "next.config.js",
        "src/components/OptimizedImage.tsx",
        "src/components/ErrorBoundary.tsx"
      ]
    },
    "styles": {
      "status": "implemented",
      "framework": "tailwindcss",
      "files_created": [
        "tailwind.config.js",
        "postcss.config.js",
        "src/styles/globals.css"
      ]
    }
  },
  
  "shared": {
    "types": {
      "User": {
        "id": "string",
        "address": "string",
        "stakingPositions": "StakingPosition[]"
      },
      "StakingPosition": {
        "amount": "number",
        "period": "flexible | 1year | 2year",
        "startDate": "Date",
        "rewards": "number"
      },
      "Asset": {
        "id": "string",
        "name": "string",
        "location": "string",
        "value": "number",
        "apy": "number",
        "type": "fisheries | gold | oil | real-estate"
      }
    }
  }
}